//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace lab07c_winforms.WS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Telephone", Namespace="http://schemas.datacontract.org/2004/07/lab07c_wcf.Model")]
    [System.SerializableAttribute()]
    public partial class Telephone : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string surnameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int number {
            get {
                return this.numberField;
            }
            set {
                if ((this.numberField.Equals(value) != true)) {
                    this.numberField = value;
                    this.RaisePropertyChanged("number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string surname {
            get {
                return this.surnameField;
            }
            set {
                if ((object.ReferenceEquals(this.surnameField, value) != true)) {
                    this.surnameField = value;
                    this.RaisePropertyChanged("surname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WS.IContactsService")]
    public interface IContactsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/GetDict", ReplyAction="http://tempuri.org/IContactsService/GetDictResponse")]
        lab07c_winforms.WS.Telephone[] GetDict();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/GetDict", ReplyAction="http://tempuri.org/IContactsService/GetDictResponse")]
        System.Threading.Tasks.Task<lab07c_winforms.WS.Telephone[]> GetDictAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/GetAll", ReplyAction="http://tempuri.org/IContactsService/GetAllResponse")]
        string GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/GetAll", ReplyAction="http://tempuri.org/IContactsService/GetAllResponse")]
        System.Threading.Tasks.Task<string> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/AddDict", ReplyAction="http://tempuri.org/IContactsService/AddDictResponse")]
        string AddDict(string surname, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/AddDict", ReplyAction="http://tempuri.org/IContactsService/AddDictResponse")]
        System.Threading.Tasks.Task<string> AddDictAsync(string surname, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/UpdDict", ReplyAction="http://tempuri.org/IContactsService/UpdDictResponse")]
        string UpdDict(int id, string surname, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/UpdDict", ReplyAction="http://tempuri.org/IContactsService/UpdDictResponse")]
        System.Threading.Tasks.Task<string> UpdDictAsync(int id, string surname, int number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/DelDict", ReplyAction="http://tempuri.org/IContactsService/DelDictResponse")]
        string DelDict(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContactsService/DelDict", ReplyAction="http://tempuri.org/IContactsService/DelDictResponse")]
        System.Threading.Tasks.Task<string> DelDictAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContactsServiceChannel : lab07c_winforms.WS.IContactsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContactsServiceClient : System.ServiceModel.ClientBase<lab07c_winforms.WS.IContactsService>, lab07c_winforms.WS.IContactsService {
        
        public ContactsServiceClient() {
        }
        
        public ContactsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContactsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContactsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public lab07c_winforms.WS.Telephone[] GetDict() {
            return base.Channel.GetDict();
        }
        
        public System.Threading.Tasks.Task<lab07c_winforms.WS.Telephone[]> GetDictAsync() {
            return base.Channel.GetDictAsync();
        }
        
        public string GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<string> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public string AddDict(string surname, int number) {
            return base.Channel.AddDict(surname, number);
        }
        
        public System.Threading.Tasks.Task<string> AddDictAsync(string surname, int number) {
            return base.Channel.AddDictAsync(surname, number);
        }
        
        public string UpdDict(int id, string surname, int number) {
            return base.Channel.UpdDict(id, surname, number);
        }
        
        public System.Threading.Tasks.Task<string> UpdDictAsync(int id, string surname, int number) {
            return base.Channel.UpdDictAsync(id, surname, number);
        }
        
        public string DelDict(int id) {
            return base.Channel.DelDict(id);
        }
        
        public System.Threading.Tasks.Task<string> DelDictAsync(int id) {
            return base.Channel.DelDictAsync(id);
        }
    }
}
